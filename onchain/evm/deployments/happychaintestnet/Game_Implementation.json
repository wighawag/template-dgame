{
  "address": "0x3ab3844d5d6614febbe19d59244a815cff691a17",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "avatarID",
          "type": "uint256"
        }
      ],
      "name": "AvatarAlreadyInGame",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "avatarID",
          "type": "uint256"
        }
      ],
      "name": "AvatarIsDead",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "avatarID",
          "type": "uint256"
        }
      ],
      "name": "AvatarNotAvailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "avatarID",
          "type": "uint256"
        }
      ],
      "name": "AvatarNotInGame",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "avatarID",
          "type": "uint256"
        }
      ],
      "name": "AvatarNotReady",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "avatarID",
          "type": "uint256"
        }
      ],
      "name": "AvatarStillInGame",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CanStillReveal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CommitmentHashNotMatching",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GameNotStarted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ImpossibleConfiguration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InCommitmentPhase",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InRevealPhase",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEpoch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoCommitmentToCancel",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "NotAuthorizedController",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "NotAuthorizedOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToReveal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAvatarsAreAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PreviousCommitmentNotRevealed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "position",
          "type": "uint64"
        }
      ],
      "name": "UnableToExitFromThisPosition",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "avatarID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "AvatarDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "avatarID",
          "type": "uint256"
        }
      ],
      "name": "AvatarWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "avatarID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "epoch",
          "type": "uint64"
        }
      ],
      "name": "CommitmentCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "avatarID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "epoch",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes24",
          "name": "commitmentHash",
          "type": "bytes24"
        }
      ],
      "name": "CommitmentMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "avatarID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "epoch",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "zone",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes24",
          "name": "commitmentHash",
          "type": "bytes24"
        },
        {
          "components": [
            {
              "internalType": "enum UsingGameTypes.ActionType",
              "name": "actionType",
              "type": "uint8"
            },
            {
              "internalType": "uint128",
              "name": "data",
              "type": "uint128"
            }
          ],
          "indexed": false,
          "internalType": "struct UsingGameTypes.Action[]",
          "name": "actions",
          "type": "tuple[]"
        }
      ],
      "name": "CommitmentRevealed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "avatarID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "epoch",
          "type": "uint64"
        }
      ],
      "name": "CommitmentVoid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "avatarID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "epoch",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "zone",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newPosition",
          "type": "uint64"
        }
      ],
      "name": "EnteredTheGame",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "avatarID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "epoch",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "zoneWhenLeaving",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "positionWhenLeaving",
          "type": "uint64"
        }
      ],
      "name": "LeftTheGame",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "avatarID",
          "type": "uint256"
        }
      ],
      "name": "getAvatar",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "avatarID",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "position",
              "type": "uint64"
            }
          ],
          "internalType": "struct UsingGameTypes.AvatarResolved",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "zones",
          "type": "uint64[]"
        },
        {
          "internalType": "uint64",
          "name": "fromIndex",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "limit",
          "type": "uint64"
        }
      ],
      "name": "getAvatarsInMultipleZones",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "avatarID",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "position",
              "type": "uint64"
            }
          ],
          "internalType": "struct UsingGameTypes.AvatarResolved[]",
          "name": "avatars",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "more",
          "type": "bool"
        },
        {
          "internalType": "uint64",
          "name": "epoch",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "zone",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "fromIndex",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "limit",
          "type": "uint64"
        }
      ],
      "name": "getAvatarsInZone",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "avatarID",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "position",
              "type": "uint64"
            }
          ],
          "internalType": "struct UsingGameTypes.AvatarResolved[]",
          "name": "avatars",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "more",
          "type": "bool"
        },
        {
          "internalType": "uint64",
          "name": "epoch",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "avatarID",
          "type": "uint256"
        }
      ],
      "name": "getCommitment",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes24",
              "name": "hash",
              "type": "bytes24"
            },
            {
              "internalType": "uint64",
              "name": "epoch",
              "type": "uint64"
            }
          ],
          "internalType": "struct UsingGameTypes.Commitment",
          "name": "commitment",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commitPhaseDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "revealPhaseDuration",
              "type": "uint256"
            },
            {
              "internalType": "contract ITime",
              "name": "time",
              "type": "address"
            },
            {
              "internalType": "contract IERC721",
              "name": "avatars",
              "type": "address"
            }
          ],
          "internalType": "struct UsingGameTypes.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEpoch",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "epoch",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "commiting",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "avatarsPerOwner",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "avatarID",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "inGame",
              "type": "bool"
            },
            {
              "internalType": "uint64",
              "name": "position",
              "type": "uint64"
            }
          ],
          "internalType": "struct UsingGameTypes.AvatarStatus[]",
          "name": "avatarIDs",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "more",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "avatarID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "payee",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "avatarID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "avatarID",
          "type": "uint256"
        }
      ],
      "name": "cancelCommit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "avatarID",
          "type": "uint256"
        },
        {
          "internalType": "bytes24",
          "name": "commitmentHash",
          "type": "bytes24"
        },
        {
          "internalType": "address payable",
          "name": "payee",
          "type": "address"
        }
      ],
      "name": "commit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "avatarID",
          "type": "uint256"
        }
      ],
      "name": "acknowledgeMissedReveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "avatarID",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "enum UsingGameTypes.ActionType",
              "name": "actionType",
              "type": "uint8"
            },
            {
              "internalType": "uint128",
              "name": "data",
              "type": "uint128"
            }
          ],
          "internalType": "struct UsingGameTypes.Action[]",
          "name": "actions",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "payee",
          "type": "address"
        }
      ],
      "name": "reveal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "contractName": "Router10X60",
  "sourceName": "solc_0_8/router/Router10X60.sol",
  "bytecode": "0x61034060405234801562000011575f80fd5b506040516200108f3803806200108f8339810160408190526200003491620006e2565b602081015151815151600a811115620000945760405162461bcd60e51b815260206004820152601b60248201527f4d41585f494d504c454d454e544154494f4e535f52454143484544000000000060448201526064015b60405180910390fd5b603c821115620000da5760405162461bcd60e51b815260206004820152601060248201526f13505617d4d251d4d7d4915050d2115160821b60448201526064016200008b565b5f835f01515f81518110620000f357620000f3620007e8565b602002602001015190505f805f805f805f805f60018b111562000133578c5180516001908110620001285762000128620007e8565b602002602001015198505b60028b111562000160578c5180516002908110620001555762000155620007e8565b602002602001015197505b60038b11156200018d578c5180516003908110620001825762000182620007e8565b602002602001015196505b60048b1115620001ba578c5180516004908110620001af57620001af620007e8565b602002602001015195505b60058b1115620001e7578c5180516005908110620001dc57620001dc620007e8565b602002602001015194505b60068b111562000214578c5180516006908110620002095762000209620007e8565b602002602001015193505b60078b111562000241578c5180516007908110620002365762000236620007e8565b602002602001015192505b60088b11156200026e578c5180516008908110620002635762000263620007e8565b602002602001015191505b60098b11156200029b578c5180516009908110620002905762000290620007e8565b602002602001015190505b6001600160a01b03998a1660805297891660a05295881660c05293871660e05291861661010052851661012052841661014052831661016052821661018052166101a0525f80808080808080808080805b8d81101562000553575f8f6020015182815181106200030f576200030f620007e8565b602090810291909101015160d881901c915060e01c808410620003645760405162461bcd60e51b815260206004820152600c60248201526b2727aa2fa4a72fa7a92222a960a11b60448201526064016200008b565b8063ffffffff169350600683101562000391576200038483602862000810565b82901b8e179d506200053b565b600c831015620003c257620003a860068462000830565b620003b590602862000810565b82901b8d179c506200053b565b6012831015620003f357620003d9600c8462000830565b620003e690602862000810565b82901b8c179b506200053b565b601883101562000424576200040a60128462000830565b6200041790602862000810565b82901b8b179a506200053b565b601e83101562000455576200043b60188462000830565b6200044890602862000810565b82901b8a1799506200053b565b602483101562000486576200046c601e8462000830565b6200047990602862000810565b82901b891798506200053b565b602a831015620004b7576200049d60248462000830565b620004aa90602862000810565b82901b881797506200053b565b6030831015620004e857620004ce602a8462000830565b620004db90602862000810565b82901b871796506200053b565b60368310156200051957620004ff60308462000830565b6200050c90602862000810565b82901b861796506200053b565b6200052660368462000830565b6200053390602862000810565b82901b851796505b505080806200054a9062000846565b915050620002ec565b50506101e09990995261020097909752610220959095526102409390935261026091909152610280526102a0526102c0526102e052610300525061032052604001516001600160a01b03166101c05262000861565b634e487b7160e01b5f52604160045260245ffd5b604051606081016001600160401b0381118282101715620005e157620005e1620005a8565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620006125762000612620005a8565b604052919050565b5f6001600160401b03821115620006355762000635620005a8565b5060051b60200190565b80516001600160a01b038116811462000656575f80fd5b919050565b5f82601f8301126200066b575f80fd5b81516020620006846200067e836200061a565b620005e7565b82815260059290921b84018101918181019086841115620006a3575f80fd5b8286015b84811015620006d75780516001600160d81b031981168114620006c9575f8081fd5b8352918301918301620006a7565b509695505050505050565b5f6020808385031215620006f4575f80fd5b82516001600160401b03808211156200070b575f80fd5b90840190606082870312156200071f575f80fd5b62000729620005bc565b82518281111562000738575f80fd5b8301601f8101881362000749575f80fd5b80516200075a6200067e826200061a565b81815260059190911b8201860190868101908a83111562000779575f80fd5b928701925b82841015620007a25762000792846200063f565b825292870192908701906200077e565b84525050508284015182811115620007b8575f80fd5b620007c6888286016200065b565b8583015250620007d9604084016200063f565b60408201529695505050505050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176200082a576200082a620007fc565b92915050565b818103818111156200082a576200082a620007fc565b5f600182016200085a576200085a620007fc565b5060010190565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e0516103005161032051610749620009465f395f601401525f61033901525f6102f201525f6102a201525f61025201525f61020201525f6101b201525f61016201525f61011201525f60c201525f607201525f6105ac01525f61058501525f61055601525f61052701525f6104f801525f6104c901525f61049a01525f61046b01525f61043c01525f61040d01525f6103de01526107495ff3fe60806040525f803560e01c90808061003860017f0000000000000000000000000000000000000000000000000000000000000000610698565b90505b8082116103d2575f600261004f83856106b1565b61005991906106c4565b90505f60068210156100a1576100708260286106fc565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610364565b600c8210156100f1576100b5600683610698565b6100c09060286106fc565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610364565b601282101561014157610105600c83610698565b6101109060286106fc565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610364565b601882101561019157610155601283610698565b6101609060286106fc565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610364565b601e8210156101e1576101a5601883610698565b6101b09060286106fc565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610364565b6024821015610231576101f5601e83610698565b6102009060286106fc565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610364565b602a82101561028157610245602483610698565b6102509060286106fc565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610364565b60308210156102d157610295602a83610698565b6102a09060286106fc565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610364565b6036821015610321576102e5603083610698565b6102f09060286106fc565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610364565b61032c603683610698565b6103379060286106fc565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff1690505b63ffffffff600882901c811690871681111561038c57610385600184610698565b93506103ca565b8663ffffffff168163ffffffff1610156103b2576103ab8360016106b1565b94506103ca565b6103c060ff831660016106b1565b95505050506103d2565b50505061003b565b5f8360010361040257507f00000000000000000000000000000000000000000000000000000000000000006105cc565b8360020361043157507f00000000000000000000000000000000000000000000000000000000000000006105cc565b8360030361046057507f00000000000000000000000000000000000000000000000000000000000000006105cc565b8360040361048f57507f00000000000000000000000000000000000000000000000000000000000000006105cc565b836005036104be57507f00000000000000000000000000000000000000000000000000000000000000006105cc565b836006036104ed57507f00000000000000000000000000000000000000000000000000000000000000006105cc565b8360070361051c57507f00000000000000000000000000000000000000000000000000000000000000006105cc565b8360080361054b57507f00000000000000000000000000000000000000000000000000000000000000006105cc565b8360090361057a57507f00000000000000000000000000000000000000000000000000000000000000006105cc565b83600a036105a957507f00000000000000000000000000000000000000000000000000000000000000006105cc565b507f00000000000000000000000000000000000000000000000000000000000000005b73ffffffffffffffffffffffffffffffffffffffff811661064d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f554e4b4e4f574e5f4d4554484f44000000000000000000000000000000000000604482015260640160405180910390fd5b365f80375f80365f845af43d5f803e808015610667573d5ff35b3d5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b818103818111156106ab576106ab61066b565b92915050565b808201808211156106ab576106ab61066b565b5f826106f7577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b500490565b80820281158282048414176106ab576106ab61066b56fea2646970667358221220de8a0a4ea7b6cbed149f85e903c529be37b4629444671bfef13629d53bd04ed764736f6c63430008140033",
  "deployedBytecode": "0x60806040525f803560e01c90808061003860017f0000000000000000000000000000000000000000000000000000000000000000610698565b90505b8082116103d2575f600261004f83856106b1565b61005991906106c4565b90505f60068210156100a1576100708260286106fc565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610364565b600c8210156100f1576100b5600683610698565b6100c09060286106fc565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610364565b601282101561014157610105600c83610698565b6101109060286106fc565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610364565b601882101561019157610155601283610698565b6101609060286106fc565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610364565b601e8210156101e1576101a5601883610698565b6101b09060286106fc565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610364565b6024821015610231576101f5601e83610698565b6102009060286106fc565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610364565b602a82101561028157610245602483610698565b6102509060286106fc565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610364565b60308210156102d157610295602a83610698565b6102a09060286106fc565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610364565b6036821015610321576102e5603083610698565b6102f09060286106fc565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff169050610364565b61032c603683610698565b6103379060286106fc565b7f0000000000000000000000000000000000000000000000000000000000000000901c64ffffffffff1690505b63ffffffff600882901c811690871681111561038c57610385600184610698565b93506103ca565b8663ffffffff168163ffffffff1610156103b2576103ab8360016106b1565b94506103ca565b6103c060ff831660016106b1565b95505050506103d2565b50505061003b565b5f8360010361040257507f00000000000000000000000000000000000000000000000000000000000000006105cc565b8360020361043157507f00000000000000000000000000000000000000000000000000000000000000006105cc565b8360030361046057507f00000000000000000000000000000000000000000000000000000000000000006105cc565b8360040361048f57507f00000000000000000000000000000000000000000000000000000000000000006105cc565b836005036104be57507f00000000000000000000000000000000000000000000000000000000000000006105cc565b836006036104ed57507f00000000000000000000000000000000000000000000000000000000000000006105cc565b8360070361051c57507f00000000000000000000000000000000000000000000000000000000000000006105cc565b8360080361054b57507f00000000000000000000000000000000000000000000000000000000000000006105cc565b8360090361057a57507f00000000000000000000000000000000000000000000000000000000000000006105cc565b83600a036105a957507f00000000000000000000000000000000000000000000000000000000000000006105cc565b507f00000000000000000000000000000000000000000000000000000000000000005b73ffffffffffffffffffffffffffffffffffffffff811661064d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f554e4b4e4f574e5f4d4554484f44000000000000000000000000000000000000604482015260640160405180910390fd5b365f80375f80365f845af43d5f803e808015610667573d5ff35b3d5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b818103818111156106ab576106ab61066b565b92915050565b808201808211156106ab576106ab61066b565b5f826106f7577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b500490565b80820281158282048414176106ab576106ab61066b56fea2646970667358221220de8a0a4ea7b6cbed149f85e903c529be37b4629444671bfef13629d53bd04ed764736f6c63430008140033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "immutableReferences": {
    "4": [
      {
        "length": 32,
        "start": 990
      }
    ],
    "6": [
      {
        "length": 32,
        "start": 1037
      }
    ],
    "8": [
      {
        "length": 32,
        "start": 1084
      }
    ],
    "10": [
      {
        "length": 32,
        "start": 1131
      }
    ],
    "12": [
      {
        "length": 32,
        "start": 1178
      }
    ],
    "14": [
      {
        "length": 32,
        "start": 1225
      }
    ],
    "16": [
      {
        "length": 32,
        "start": 1272
      }
    ],
    "18": [
      {
        "length": 32,
        "start": 1319
      }
    ],
    "20": [
      {
        "length": 32,
        "start": 1366
      }
    ],
    "22": [
      {
        "length": 32,
        "start": 1413
      }
    ],
    "24": [
      {
        "length": 32,
        "start": 1452
      }
    ],
    "26": [
      {
        "length": 32,
        "start": 114
      }
    ],
    "28": [
      {
        "length": 32,
        "start": 194
      }
    ],
    "30": [
      {
        "length": 32,
        "start": 274
      }
    ],
    "32": [
      {
        "length": 32,
        "start": 354
      }
    ],
    "34": [
      {
        "length": 32,
        "start": 434
      }
    ],
    "36": [
      {
        "length": 32,
        "start": 514
      }
    ],
    "38": [
      {
        "length": 32,
        "start": 594
      }
    ],
    "40": [
      {
        "length": 32,
        "start": 674
      }
    ],
    "42": [
      {
        "length": 32,
        "start": 754
      }
    ],
    "44": [
      {
        "length": 32,
        "start": 825
      }
    ],
    "46": [
      {
        "length": 32,
        "start": 20
      }
    ]
  },
  "inputSourceName": "project/solc_0_8/router/Router10X60.sol",
  "devdoc": {
    "kind": "dev",
    "version": 1,
    "methods": {},
    "events": {
      "AvatarDeposited(uint256,address,address)": {
        "params": {
          "avatarID": "the id of the NFT being deposited",
          "controller": "the account authorized to control the avatar in-game",
          "owner": "the account authorized to get the avatar back"
        }
      },
      "AvatarWithdrawn(uint256)": {
        "params": {
          "avatarID": "the id of the NFT being transfered out"
        }
      },
      "CommitmentCancelled(uint256,uint64)": {
        "params": {
          "avatarID": "avatar whose commitment is cancelled",
          "epoch": "epoch number on which this commit belongs to"
        }
      },
      "CommitmentMade(uint256,uint64,bytes24)": {
        "params": {
          "avatarID": "avatar whose commitment is made",
          "commitmentHash": "the hash of moves",
          "epoch": "epoch number on which this commit belongs to"
        }
      },
      "CommitmentRevealed(uint256,uint64,uint64,bytes24,(uint8,uint128)[])": {
        "params": {
          "actions": "the actions",
          "avatarID": "avatar id whose action is commited",
          "commitmentHash": "the hash of the moves",
          "epoch": "epoch number on which this commit belongs to"
        }
      },
      "CommitmentVoid(uint256,uint64)": {
        "params": {
          "avatarID": "the account that made the commitment",
          "epoch": "epoch number on which this commit belongs to"
        }
      },
      "EnteredTheGame(uint256,uint64,uint64,uint64)": {
        "params": {
          "avatarID": "the id of the NFT being added",
          "epoch": "the epoch at which it happened",
          "newPosition": "the resulting avatar's position",
          "zone": "the resulting avatar's zone"
        }
      },
      "LeftTheGame(uint256,uint64,uint64,uint64)": {
        "params": {
          "avatarID": "the id of the NFT being removed",
          "epoch": "the epoch at which it happened",
          "positionWhenLeaving": "the avatar's position when leaving",
          "zoneWhenLeaving": "the avatar's zone when leaving"
        }
      }
    },
    "errors": {
      "AvatarIsDead(uint256)": [
        {
          "params": {
            "avatarID": "the id of the dead avatar The avatar is dead, no action possible"
          }
        }
      ]
    }
  },
  "evm": {
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "373000",
        "executionCost": "infinite",
        "totalCost": "infinite"
      },
      "external": {
        "": "infinite"
      }
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"implementations\",\"type\":\"address[]\"},{\"internalType\":\"bytes5[]\",\"name\":\"sigMap\",\"type\":\"bytes5[]\"},{\"internalType\":\"address\",\"name\":\"fallbackImplementation\",\"type\":\"address\"}],\"internalType\":\"struct Router10X60.Routes\",\"name\":\"routes\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"}],\"devdoc\":{\"author\":\"Ronan Sandford\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"routes\":\"define the routing   each selector is represented by a bytes5, where the upper most bytes4 is the selector and   the lowest bytes represent the index of the implementations  implementations' addresses are given in an array\"}}},\"title\":\"Router for at max 10 Implementations and 60 function selectors\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"This Router implementation only support at max 10 implementations and 60 function selectors\"}},\"notice\":\"Create an immutable route and delegate function call to their respective implementations\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"project/solc_0_8/router/Router10X60.sol\":\"Router10X60\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"project/solc_0_8/router/Router10X60.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Router for at max 10 Implementations and 60 function selectors\\n/// @author Ronan Sandford\\n/// @notice Create an immutable route and delegate function call to their respective implementations\\ncontract Router10X60 {\\n\\taddress internal immutable implementation_00;\\n\\taddress internal immutable implementation_01;\\n\\taddress internal immutable implementation_02;\\n\\taddress internal immutable implementation_03;\\n\\taddress internal immutable implementation_04;\\n\\taddress internal immutable implementation_05;\\n\\taddress internal immutable implementation_06;\\n\\taddress internal immutable implementation_07;\\n\\taddress internal immutable implementation_08;\\n\\taddress internal immutable implementation_09;\\n\\n\\taddress internal immutable fallback_implementation;\\n\\n\\tuint256 internal immutable sigs_00;\\n\\tuint256 internal immutable sigs_01;\\n\\tuint256 internal immutable sigs_02;\\n\\tuint256 internal immutable sigs_03;\\n\\tuint256 internal immutable sigs_04;\\n\\tuint256 internal immutable sigs_05;\\n\\tuint256 internal immutable sigs_06;\\n\\tuint256 internal immutable sigs_07;\\n\\tuint256 internal immutable sigs_08;\\n\\tuint256 internal immutable sigs_09;\\n\\n\\tuint256 internal immutable sigs_count;\\n\\n\\t// This is the interface for routes specification\\n\\tstruct Routes {\\n\\t\\taddress[] implementations;\\n\\t\\t/// The sigmap is represented as an array of entry\\n\\t\\t// each entry is 5 bytes\\n\\t\\t/// the upmost bytes are the bytes4 function selector\\n\\t\\t// the lowest byte represent the index in the implementation's address array provided aling\\n\\t\\t// This measn there is at max 256 implementation possible\\n\\t\\t// The entry needs to be ordered so binary search can be executed on them\\n\\t\\tbytes5[] sigMap;\\n\\t\\taddress fallbackImplementation;\\n\\t}\\n\\n\\t/// @notice This Router implementation only support at max 10 implementations and 60 function selectors\\n\\t/// @param routes define the routing \\n\\t///  each selector is represented by a bytes5, where the upper most bytes4 is the selector and \\n\\t///  the lowest bytes represent the index of the implementations\\n\\t///  implementations' addresses are given in an array\\n\\tconstructor(Routes memory routes) {\\n\\t\\tuint256 numSigs = routes.sigMap.length;\\n\\t\\tuint256 numImpl = routes.implementations.length;\\n\\t\\trequire(numImpl <= 10, 'MAX_IMPLEMENTATIONS_REACHED');\\n\\t\\trequire(numSigs <= 60, 'MAX_SIGS_REACHED');\\n\\n\\t\\t{\\n\\t\\t\\taddress tmp_implementation_00 = routes.implementations[0];\\n\\t\\t\\taddress tmp_implementation_01;\\n\\t\\t\\taddress tmp_implementation_02;\\n\\t\\t\\taddress tmp_implementation_03;\\n\\t\\t\\taddress tmp_implementation_04;\\n\\t\\t\\taddress tmp_implementation_05;\\n\\t\\t\\taddress tmp_implementation_06;\\n\\t\\t\\taddress tmp_implementation_07;\\n\\t\\t\\taddress tmp_implementation_08;\\n\\t\\t\\taddress tmp_implementation_09;\\n\\t\\t\\tif (numImpl > 1) {\\n\\t\\t\\t\\ttmp_implementation_01 = routes.implementations[1];\\n\\t\\t\\t}\\n\\t\\t\\tif (numImpl > 2) {\\n\\t\\t\\t\\ttmp_implementation_02 = routes.implementations[2];\\n\\t\\t\\t}\\n\\t\\t\\tif (numImpl > 3) {\\n\\t\\t\\t\\ttmp_implementation_03 = routes.implementations[3];\\n\\t\\t\\t}\\n\\t\\t\\tif (numImpl > 4) {\\n\\t\\t\\t\\ttmp_implementation_04 = routes.implementations[4];\\n\\t\\t\\t}\\n\\t\\t\\tif (numImpl > 5) {\\n\\t\\t\\t\\ttmp_implementation_05 = routes.implementations[5];\\n\\t\\t\\t}\\n\\t\\t\\tif (numImpl > 6) {\\n\\t\\t\\t\\ttmp_implementation_06 = routes.implementations[6];\\n\\t\\t\\t}\\n\\t\\t\\tif (numImpl > 7) {\\n\\t\\t\\t\\ttmp_implementation_07 = routes.implementations[7];\\n\\t\\t\\t}\\n\\t\\t\\tif (numImpl > 8) {\\n\\t\\t\\t\\ttmp_implementation_08 = routes.implementations[8];\\n\\t\\t\\t}\\n\\t\\t\\tif (numImpl > 9) {\\n\\t\\t\\t\\ttmp_implementation_09 = routes.implementations[9];\\n\\t\\t\\t}\\n\\n\\t\\t\\timplementation_00 = tmp_implementation_00;\\n\\t\\t\\timplementation_01 = tmp_implementation_01;\\n\\t\\t\\timplementation_02 = tmp_implementation_02;\\n\\t\\t\\timplementation_03 = tmp_implementation_03;\\n\\t\\t\\timplementation_04 = tmp_implementation_04;\\n\\t\\t\\timplementation_05 = tmp_implementation_05;\\n\\t\\t\\timplementation_06 = tmp_implementation_06;\\n\\t\\t\\timplementation_07 = tmp_implementation_07;\\n\\t\\t\\timplementation_08 = tmp_implementation_08;\\n\\t\\t\\timplementation_09 = tmp_implementation_09;\\n\\t\\t}\\n\\n\\t\\t{\\n\\t\\t\\tuint256 tmp_sigs_00;\\n\\t\\t\\tuint256 tmp_sigs_01;\\n\\t\\t\\tuint256 tmp_sigs_02;\\n\\t\\t\\tuint256 tmp_sigs_03;\\n\\t\\t\\tuint256 tmp_sigs_04;\\n\\t\\t\\tuint256 tmp_sigs_05;\\n\\t\\t\\tuint256 tmp_sigs_06;\\n\\t\\t\\tuint256 tmp_sigs_07;\\n\\t\\t\\tuint256 tmp_sigs_08;\\n\\t\\t\\tuint256 tmp_sigs_09;\\n\\t\\t\\t\\n\\t\\t\\tuint256 lastSig;\\n\\t\\t\\tfor (uint256 i = 0; i < numSigs; i++) {\\n\\t\\t\\t\\tuint256 pair = uint256(uint40(routes.sigMap[i]));\\n\\t\\t\\t\\tuint32 sig = uint32(pair >> 8);\\n\\t\\t\\t\\trequire(lastSig < sig, \\\"NOT_IN_ORDER\\\");\\n\\t\\t\\t\\tlastSig = sig;\\n\\t\\t\\t\\tif (i < 6) {\\n\\t\\t\\t\\t\\ttmp_sigs_00 = tmp_sigs_00 | (pair << (i * 40));\\n\\t\\t\\t\\t} else if (i < 12) {\\n\\t\\t\\t\\t\\ttmp_sigs_01 = tmp_sigs_01 | (pair << ((i - 6) * 40));\\n\\t\\t\\t\\t} else if (i < 18) {\\n\\t\\t\\t\\t\\ttmp_sigs_02 = tmp_sigs_02 | (pair << ((i - 12) * 40));\\n\\t\\t\\t\\t} else if (i < 24) {\\n\\t\\t\\t\\t\\ttmp_sigs_03 = tmp_sigs_03 | (pair << ((i - 18) * 40));\\n\\t\\t\\t\\t} else if (i < 30) {\\n\\t\\t\\t\\t\\ttmp_sigs_04 = tmp_sigs_04 | (pair << ((i - 24) * 40));\\n\\t\\t\\t\\t} else if (i < 36) {\\n\\t\\t\\t\\t\\ttmp_sigs_05 = tmp_sigs_05 | (pair << ((i - 30) * 40));\\n\\t\\t\\t\\t} else if (i < 42) {\\n\\t\\t\\t\\t\\ttmp_sigs_06 = tmp_sigs_06 | (pair << ((i - 36) * 40));\\n\\t\\t\\t\\t} else if (i < 48) {\\n\\t\\t\\t\\t\\ttmp_sigs_07 = tmp_sigs_07 | (pair << ((i - 42) * 40));\\n\\t\\t\\t\\t} else if (i < 54) {\\n\\t\\t\\t\\t\\ttmp_sigs_07 = tmp_sigs_08 | (pair << ((i - 48) * 40));\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\ttmp_sigs_07 = tmp_sigs_09 | (pair << ((i - 54) * 40));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tsigs_00 = tmp_sigs_00;\\n\\t\\t\\tsigs_01 = tmp_sigs_01;\\n\\t\\t\\tsigs_02 = tmp_sigs_02;\\n\\t\\t\\tsigs_03 = tmp_sigs_03;\\n\\t\\t\\tsigs_04 = tmp_sigs_04;\\n\\t\\t\\tsigs_05 = tmp_sigs_05;\\n\\t\\t\\tsigs_06 = tmp_sigs_06;\\n\\t\\t\\tsigs_07 = tmp_sigs_07;\\n\\t\\t\\tsigs_08 = tmp_sigs_08;\\n\\t\\t\\tsigs_09 = tmp_sigs_09;\\n\\n\\t\\t\\tsigs_count = numSigs;\\n\\t\\t}\\n\\n\\t\\tfallback_implementation = routes.fallbackImplementation;\\n\\t}\\n\\n\\tfallback() external payable {\\n\\t\\tuint32 sig = uint32(msg.sig);\\n\\t\\tuint256 implementationIndex;\\n\\t\\tuint256 left = 0;\\n    \\tuint256 right = sigs_count - 1;\\n\\t\\twhile (left <= right) {\\n\\t\\t\\tuint256 i = (left + right) / 2;\\n\\t\\t\\tuint40 pair;\\n\\t\\t\\tif (i < 6) {\\n\\t\\t\\t\\tpair = uint40((sigs_00 >> (i * 40)) & 0xFFFFFFFFFF);\\n\\t\\t\\t} else if (i < 12) {\\n\\t\\t\\t\\tpair = uint40((sigs_01 >> ((i - 6) * 40)) & 0xFFFFFFFFFF);\\n\\t\\t\\t} else if (i < 18) {\\n\\t\\t\\t\\tpair = uint40((sigs_02 >> ((i - 12) * 40)) & 0xFFFFFFFFFF);\\n\\t\\t\\t} else if (i < 24) {\\n\\t\\t\\t\\tpair = uint40((sigs_03 >> ((i - 18) * 40)) & 0xFFFFFFFFFF);\\n\\t\\t\\t} else if (i < 30) {\\n\\t\\t\\t\\tpair = uint40((sigs_04 >> ((i - 24) * 40)) & 0xFFFFFFFFFF);\\n\\t\\t\\t} else if (i < 36) {\\n\\t\\t\\t\\tpair = uint40((sigs_05 >> ((i - 30) * 40)) & 0xFFFFFFFFFF);\\n\\t\\t\\t} else if (i < 42) {\\n\\t\\t\\t\\tpair = uint40((sigs_06 >> ((i - 36) * 40)) & 0xFFFFFFFFFF);\\n\\t\\t\\t}  else if (i < 48) {\\n\\t\\t\\t\\tpair = uint40((sigs_07 >> ((i - 42) * 40)) & 0xFFFFFFFFFF);\\n\\t\\t\\t}  else if (i < 54) {\\n\\t\\t\\t\\tpair = uint40((sigs_08 >> ((i - 48) * 40)) & 0xFFFFFFFFFF);\\n\\t\\t\\t}  else {\\n\\t\\t\\t\\tpair = uint40((sigs_09 >> ((i - 54) * 40)) & 0xFFFFFFFFFF);\\n\\t\\t\\t}\\n\\t\\t\\tuint32 value = uint32(pair >> 8);\\n\\t\\t\\tif (value > sig) {\\n\\t\\t\\t\\tright = i -1;\\n\\t\\t\\t} else if (value < sig) {\\n\\t\\t\\t\\tleft = i + 1;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\timplementationIndex = uint256(pair & 0xFF) + 1;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\taddress implementation;\\n\\t\\tif (implementationIndex == 1) {\\n\\t\\t\\timplementation = implementation_00;\\n\\t\\t} else if (implementationIndex == 2) {\\n\\t\\t\\timplementation = implementation_01;\\n\\t\\t} else if (implementationIndex == 3) {\\n\\t\\t\\timplementation = implementation_02;\\n\\t\\t} else if (implementationIndex == 4) {\\n\\t\\t\\timplementation = implementation_03;\\n\\t\\t} else if (implementationIndex == 5) {\\n\\t\\t\\timplementation = implementation_04;\\n\\t\\t} else if (implementationIndex == 6) {\\n\\t\\t\\timplementation = implementation_05;\\n\\t\\t} else if (implementationIndex == 7) {\\n\\t\\t\\timplementation = implementation_06;\\n\\t\\t} else if (implementationIndex == 8) {\\n\\t\\t\\timplementation = implementation_07;\\n\\t\\t} else if (implementationIndex == 9) {\\n\\t\\t\\timplementation = implementation_08;\\n\\t\\t} else if (implementationIndex == 10) {\\n\\t\\t\\timplementation = implementation_09;\\n\\t\\t} else {\\n\\t\\t\\timplementation = fallback_implementation;\\n\\t\\t}\\n\\n\\t\\trequire(implementation != address(0), 'UNKNOWN_METHOD');\\n\\n\\t\\t// taken from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/8cab922347e79732f6a532a75da5081ba7447a71/contracts/proxy/Proxy.sol#L22-L45\\n\\t\\tassembly {\\n\\t\\t\\t// Copy msg.data. We take full control of memory in this inline assembly\\n\\t\\t\\t// block because it will not return to Solidity code. We overwrite the\\n\\t\\t\\t// Solidity scratch pad at memory position 0.\\n\\t\\t\\tcalldatacopy(0, 0, calldatasize())\\n\\n\\t\\t\\t// Call the implementation.\\n\\t\\t\\t// out and outsize are 0 because we don't know the size yet.\\n\\t\\t\\tlet result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n\\t\\t\\t// Copy the returned data.\\n\\t\\t\\treturndatacopy(0, 0, returndatasize())\\n\\n\\t\\t\\tswitch result\\n\\t\\t\\t// delegatecall returns 0 on error.\\n\\t\\t\\tcase 0 {\\n\\t\\t\\t\\trevert(0, returndatasize())\\n\\t\\t\\t}\\n\\t\\t\\tdefault {\\n\\t\\t\\t\\treturn(0, returndatasize())\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x8f51b7932023299088698f99c6f75f54cf880417d4a42c38548e17b7850d8646\",\"license\":\"MIT\"}},\"version\":1}",
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "userdoc": {
    "kind": "user",
    "version": 1,
    "methods": {},
    "events": {
      "AvatarDeposited(uint256,address,address)": {
        "notice": "An avatar has been deposited, ready to enter"
      },
      "AvatarWithdrawn(uint256)": {
        "notice": "A avatar has been withdrawn"
      },
      "CommitmentCancelled(uint256,uint64)": {
        "notice": "A player has cancelled its current commitment (before it reached the reveal phase)"
      },
      "CommitmentMade(uint256,uint64,bytes24)": {
        "notice": "A player has commited to make a move and reveal it on the reveal phase"
      },
      "CommitmentRevealed(uint256,uint64,uint64,bytes24,(uint8,uint128)[])": {
        "notice": "Player has revealed its previous commitment"
      },
      "CommitmentVoid(uint256,uint64)": {
        "notice": "A player has acknowledged its failure to reveal its previous commitment"
      },
      "EnteredTheGame(uint256,uint64,uint64,uint64)": {
        "notice": "A avatar has entered the game"
      },
      "LeftTheGame(uint256,uint64,uint64,uint64)": {
        "notice": "An avatar has left the game"
      }
    },
    "errors": {
      "AvatarAlreadyInGame(uint256)": [
        {
          "notice": "happen when attempting to enter an avatar already in the game"
        }
      ],
      "AvatarIsDead(uint256)": [
        {
          "notice": "Player have to reveal if they can"
        }
      ],
      "AvatarNotAvailable(uint256)": [
        {
          "notice": "happen when attempting to move an avatar not in the game"
        }
      ],
      "AvatarNotInGame(uint256)": [
        {
          "notice": "happen when attempting to move an avatar not in the game"
        }
      ],
      "AvatarNotReady(uint256)": [
        {
          "notice": "happen when attempting to move an avatar that just entered the game. \\  It needs to wait the next epoch"
        }
      ],
      "AvatarStillInGame(uint256)": [
        {
          "notice": "happen when attempting to extract an avatar still in the game"
        }
      ],
      "CanStillReveal()": [
        {
          "notice": "Player have to reveal if they can prevent player from acknowledging missed reveal if there is still time to reveal."
        }
      ],
      "CommitmentHashNotMatching()": [
        {
          "notice": "Player have to reveal their commitment using the exact same move values  If they provide different value, the commitment hash will differ and Game will reject their reveal."
        }
      ],
      "GameNotStarted()": [
        {
          "notice": "Game has not started yet, can't perform any action"
        }
      ],
      "ImpossibleConfiguration()": [
        {
          "notice": "The cell configuration is invalid This can happen win debug mode where admin can setup cell bypassing moves rules For example when setting up neighborood configuration that would require a cell to have negative life"
        }
      ],
      "InCommitmentPhase()": [
        {
          "notice": "When in Commit phase, player can make new commitment but they cannot reveal their move yet."
        }
      ],
      "InRevealPhase()": [
        {
          "notice": "When in Reveal phase, it is not possible to commit new moves or cancel previous commitment  During Reveal phase, players have to reveal their commitment, if not already done."
        }
      ],
      "InvalidData()": [
        {
          "notice": "happen when transfering an avatar with invalid data"
        }
      ],
      "InvalidEpoch()": [
        {
          "notice": "Player can only reveal their move in the same epoch they commited.abi  If a player reveal later it can only do to minimize the reserve burn cost by calling : `acknowledgeMissedReveal`"
        }
      ],
      "NoCommitmentToCancel()": [
        {
          "notice": "There is no commitment registered, cannot cancel."
        }
      ],
      "NotAuthorizedController(address)": [
        {
          "notice": "happen when an unauthorized account attempt to control an avatar"
        }
      ],
      "NotAuthorizedOwner(address)": [
        {
          "notice": "happen when an unauthorized account attempt to withdraw an avatar"
        }
      ],
      "NothingToReveal()": [
        {
          "notice": "Player can only reveal moves they commited."
        }
      ],
      "PreviousCommitmentNotRevealed()": [
        {
          "notice": "Previous commitment need to be revealed before making a new one. Even if the corresponding reveal phase has passed.\\  It is also not possible to withdraw any amount from reserve until the commitment is revealed.\\If player lost the information to reveal, it can acknowledge failure which will burn all its reserve.\\"
        }
      ],
      "UnableToExitFromThisPosition(uint64)": [
        {
          "notice": "happen when attempting to leave the game from a non-exit position"
        }
      ]
    }
  },
  "argsData": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000cc0925082bfb1122534d1a7a33bd1dc990113a3900000000000000000000000021d366ee3bbf67ab057c517380d37e54ffd9dfc0000000000000000000000000ac0ea884d2763ab2a73851820dd0e6a8f1caf8e0000000000000000000000000bee0c6c405847203de86492f7753b4d0a379c20f000000000000000000000000000000000000000000000000000000000000000e00f714ce010000000000000000000000000000000000000000000000000000001328ec9b00000000000000000000000000000000000000000000000000000000150b7a02010000000000000000000000000000000000000000000000000000002e2d29840100000000000000000000000000000000000000000000000000000069bcdb7d000000000000000000000000000000000000000000000000000000007020b46303000000000000000000000000000000000000000000000000000000757991a8000000000000000000000000000000000000000000000000000000008aa6adcd0100000000000000000000000000000000000000000000000000000094e434ec02000000000000000000000000000000000000000000000000000000c3176e7c00000000000000000000000000000000000000000000000000000000c3f909d400000000000000000000000000000000000000000000000000000000c4928f7903000000000000000000000000000000000000000000000000000000d6e3b25202000000000000000000000000000000000000000000000000000000df7d391f00000000000000000000000000000000000000000000000000000000",
  "transaction": {
    "hash": "0xcea71be1f80bcecd73eb5d87b23937cab3a719d681a1f4ef2f35d52a05ebe198",
    "origin": "0x61c461ecc993aadeb7e4b47e96d1b8cc37314b20"
  },
  "receipt": {
    "blockHash": "0x3c4d22d8e8746548f85932c9b828ba919a1b6b38697d20474c868bfabac54b6c",
    "blockNumber": "0x7d0b78",
    "transactionIndex": "0x1"
  }
}